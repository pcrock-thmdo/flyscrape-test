#!/usr/bin/env bash
#
# `groles`: search and browse GCP roles in your terminal
#
# Dependencies:
#
# * fzf <https://github.com/junegunn/fzf>
# * bat <https://github.com/sharkdp/bat>
# * jq <https://jqlang.org/>
# * curl <https://curl.se/>
#
set -euo pipefail

init() {
    GROLES_VERSION="0.1.2"
    export BAT_THEME="${BAT_THEME:-ansi}"
    export XDG_DATA_HOME="${XDG_DATA_HOME:-"${HOME}/.local/share"}"
    GROLES_DATA_HOME="${GROLES_DATA_HOME:-"${XDG_DATA_HOME}/groles"}"
    mkdir -p "${GROLES_DATA_HOME}"
    ROLES_JSON="${GROLES_DATA_HOME}/roles.json"
    GROLES_REPO="${GROLES_REPO:-"pcrock-thmdo/flyscrape-test"}"
}

help() {
    cat <<EOF
Usage: groles [--update|--version|--help]
EOF
}

curl_download() {
    local url="${1}"
    curl \
        --proto '=https' \
        --tlsv1.2 \
        --silent \
        --show-error \
        --fail \
        --location "${url}"
}

github_latest_tag() {
    local repo="${1}"
    curl_download "https://api.github.com/repos/${repo}/releases/latest" \
        | grep --perl-regexp --only-matching '(?<="tag_name":)\s*"\S+"' \
        | tr --delete '" '
}

update_roles_json() {
    echo "Updating roles data..." >&2
    local latest_tag
    latest_tag="$(github_latest_tag "${GROLES_REPO}")"
    curl_download "https://github.com/${GROLES_REPO}/releases/download/${latest_tag}/roles.json.gz" \
        | gunzip - \
        > "${ROLES_JSON}"
}

get_roles() {
    # shellcheck shell=sh
    # the source of this function will be used inside fzf, executed by `sh` as well as `bash`
    jq '.[0].data.roles' < "${ROLES_JSON}"
}

get_headings() {
    get_roles | jq --raw-output 'map(.title + " (" + .id + ")") | join("\n")'
}

get_details() {
    # shellcheck shell=sh
    # the source of this function will be used inside fzf, executed by `sh` as well as `bash`
    local role_heading="${*}" jq_script role_id
    role_id="$(echo "${role_heading}" | grep --only-matching --perl-regexp '\(\S+\)')"
    jq_script="$(cat <<EOF
map(
    select(("(" + .id + ")") == "${role_id}")
)
| map(
    [
        "# " + .title,
        "",
        "\`" + .id + "\`",
        "",
        "> " + .description,
        "",
        "Beta: \`" + (.is_beta | tostring) + "\`",
        "",
        "Permissions:",
        "",
        (.permissions | map("* \`" + . + "\`") | join("\n"))
    ] | join("\n")
)
| join("\n")
EOF
)"
    jq --raw-output "${jq_script}"
}

select_role() {
    get_headings | fzf_ui
}

fzf_ui() {
    # expects output of `get_headings` to be piped as stdin
    # returns the user's selected role heading via stdout

    local preview_cmd
    preview_cmd="
ROLES_JSON=${ROLES_JSON}
$(declare -f get_roles)
$(declare -f get_details)
get_roles \
| get_details {} \
| bat --language markdown \
  --wrap character \
  --decorations never \
  --color always \
  --paging never \
  --terminal-width \"\$((FZF_PREVIEW_COLUMNS-2))\"
"

    SHELL="sh" \
    fzf --ansi \
        --preview "${preview_cmd}" \
        --preview-window up,75% \
        --layout reverse \
        --prompt "Role: "
}

main() {
    init

    case "${1:-}" in
        --update|-u)
            update_roles_json
            exit 0
        ;;
        --version|-v)
            echo "${GROLES_VERSION}"
            exit 0
        ;;
        --help|-h)
            help
            exit 0
        ;;
        "")
            # carry on sir
        ;;
        *)
            echo "Unrecognized argument: ${1}"
            help
            exit 1
        ;;
    esac

    test -f "${ROLES_JSON}" || update_roles_json

    local role_heading
    role_heading="$(select_role)"
    get_roles \
        | get_details "${role_heading}" \
        | bat --language markdown \
          --wrap character \
          --decorations never
}

main "$@"
