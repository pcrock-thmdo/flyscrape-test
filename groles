#!/usr/bin/env bash
set -Eeuo pipefail

INPUT_FILE=roles.json

init() {
    BAT_THEME="${BAT_THEME:-ansi}"
    export BAT_THEME
}

get_roles() {
    # shellcheck shell=sh
    # the source of this function will be used inside fzf, executed by `sh` as well as `bash`
    jq '.[0].data.roles' < "${INPUT_FILE}"
}

get_headings() {
    get_roles | jq --raw-output 'map(.title + " (" + .id + ")") | join("\n")'
}

get_details() {
    # shellcheck shell=sh
    # the source of this function will be used inside fzf, executed by `sh` as well as `bash`
    local role_heading="${*}" jq_script role_id
    role_id="$(echo "${role_heading}" | grep --only-matching --perl-regexp '\(\S+\)')"
    jq_script="$(cat <<EOF
map(
    select(("(" + .id + ")") == "${role_id}")
)
| map(
    [
        "# " + .title,
        "",
        "\`" + .id + "\`",
        "",
        "> " + .description,
        "",
        "Beta: \`" + (.is_beta | tostring) + "\`",
        "",
        "Permissions:",
        "",
        (.permissions | map("* \`" + . + "\`") | join("\n"))
    ] | join("\n")
)
| join("\n")
EOF
)"
    jq --raw-output "${jq_script}"
}

select_role() {
    local preview_cmd
    preview_cmd="
INPUT_FILE=${INPUT_FILE}
$(declare -f get_roles)
$(declare -f get_details)
get_roles \
| get_details {} \
| bat --language markdown \
  --wrap character \
  --decorations never \
  --color always \
  --paging never \
  --terminal-width \"\$((FZF_PREVIEW_COLUMNS-2))\"
"

    get_headings | fzf_ui
}

fzf_ui() {
    # expects output of `get_headings` to be piped as stdin
    # returns the user's selected role heading via stdout
    SHELL="sh" \
    fzf --ansi \
        --preview "${preview_cmd}" \
        --preview-window up,75% \
        --layout reverse \
        --prompt "Role: "
}

main() {
    init
    local role_heading
    role_heading="$(select_role)"
    get_roles | get_details "${role_heading}" \
        | bat --language markdown \
          --wrap character \
          --decorations never
}

main
